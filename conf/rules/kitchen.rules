import org.openhab.core.library.types.*

var PercentType civilDuskLevel = new PercentType(50)
var PercentType nauticalDuskLevel = new PercentType(75)
var PercentType astroDuskLevel = new PercentType (100)
var PercentType on = new PercentType(100)
var PercentType off = new PercentType(0)

rule "Civl Dusk Triggered"
when 
    Channel 'astro:sun:local:civilDusk#event' triggered START
then
    logInfo("Kitchen", "Civil dusk rule triggered!")
    
    if (AutoKitchenLightSwitch.state == OFF) {
        logInfo("Kitchen", "Skip adjusting the lights, AutoKitchenLightSwitch is off")
        return
    }

    if (LifxKitchenDimmer.state < civilDuskLevel) {
        logInfo("Kitchen", "Setting lights to {}%", civilDuskLevel)
        sendCommand(LifxKitchenDimmer, civilDuskLevel)
    } else {
        logInfo("Kitchen", "Skip adjusting the lights, the light level is higher than the civilDuskLevel")
    }
end

rule "Nautical Dusk Triggered"
when 
    Channel 'astro:sun:local:nauticalDusk#event' triggered START
then
    logInfo("Kitchen", "Nautical dusk rule triggered!")

    if (AutoKitchenLightSwitch.state == OFF) {
        logInfo("Kitchen", "Skip adjusting the lights, AutoKitchenLightSwitch is off")
        return
    }
    
    if (LifxKitchenDimmer.state < nauticalDuskLevel) {
        logInfo("Kitchen", "Setting lights to {}%", nauticalDuskLevel)
        sendCommand(LifxKitchenDimmer, nauticalDuskLevel)
    } else {
        logInfo("Kitchen", "Skip adjusting the lights, the light level is higher than the nauticalDuskLevel")
    }
end

rule "Astro Dusk Triggered"
when 
    Channel 'astro:sun:local:astroDusk#event' triggered START
then
    logInfo("Kitchen", "Astro dusk rule triggered!")

    if (AutoKitchenLightSwitch.state == OFF) {
        logInfo("Kitchen", "Skip adjusting the lights, AutoKitchenLightSwitch is off")
        return
    }

    if (LifxKitchenDimmer.state < astroDuskLevel) {
        logInfo("Kitchen", "Setting lights to {}%", astroDuskLevel)
        sendCommand(LifxKitchenDimmer, astroDuskLevel)
    } else {
        logInfo("Kitchen", "Skip adjusting the lights, the light level is higher than the astroDuskLevel")
    }
end

rule "Dimming lights at night"
when
    Time cron "0 30-55 23 1/1 * ? *"
then
    logInfo("Kitchen", "Dimming lights late at night triggered!")

    if (AutoKitchenLightSwitch.state == OFF) {
        logInfo("Kitchen", "Skip adjusting the lights, AutoKitchenLightSwitch is off")
        return
    }
   
    var int currentLevel =  (LifxKitchenDimmer.state as DecimalType).intValue

    if (currentLevel > 0) {
        var newLevel = if (currentLevel > 4) new PercentType(currentLevel - 4) else off
        logInfo("Kitchen", "Setting Kitchen Lights to {}%", newLevel) 
        sendCommand(LifxKitchenDimmer, newLevel)
    } else {
        logInfo("Kitchen", "Skip dimming Kitchen Lights since they are already off")
    }
end
